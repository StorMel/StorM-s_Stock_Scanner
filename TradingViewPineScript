// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LonesomeTheBlue  credit for the main S/R logic
// © StorMonster threw all the relevant stuff together to match the sanner in python

//@version=6
indicator('StorMs all in one', overlay = true, max_bars_back = 501)
prd = input.int(defval = 10, title = 'Pivot Period', minval = 2, maxval = 30, group = 'Settings 🔨', tooltip = 'Used while calculating Pivot Points, checks left&right bars')
ppsrc = input.string(defval = 'High/Low', title = 'Source', options = ['High/Low', 'Close/Open'], group = 'Settings 🔨', tooltip = 'Source for Pivot Points')
ChannelW = input.int(defval = 1, title = 'Maximum Channel Width %', minval = 1, maxval = 8, group = 'Settings 🔨', tooltip = 'Calculated using Highest/Lowest levels in 500 bars')
minstrength = input.int(defval = 2, title = 'Minimum Strength', minval = 1, group = 'Settings 🔨', tooltip = 'Channel must contain at least 2 Pivot Points')
maxnumsr = input.int(defval = 10, title = 'Maximum Number of S/R', minval = 1, maxval = 10, group = 'Settings 🔨', tooltip = 'Maximum number of Support/Resistance Channels to Show') - 1
loopback = input.int(defval = 500, title = 'Loopback Period', minval = 100, maxval = 1500, group = 'Settings 🔨', tooltip = 'While calculating S/R levels it checks Pivots in Loopback Period')
res_col = input.color(defval = color.new(#fbff00, 40), title = 'Resistance Color', group = 'Colors 🟡🟢🟣')
sup_col = input.color(defval = color.new(#fbff00, 40), title = 'Support Color', group = 'Colors 🟡🟢🟣')
inch_col = input.color(defval = color.new(#fbff00, 63), title = 'Color When Price in Channel', group = 'Colors 🟡🟢🟣')
showpp = input.bool(defval = false, title = 'Show Pivot Points', group = 'Extras ⏶⏷')


// get Pivot High/low
float src1 = ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 = ppsrc == 'High/Low' ? low : math.min(close, open)
float ph = ta.pivothigh(src1, prd, prd)
float pl = ta.pivotlow(src2, prd, prd)

// draw Pivot points
plotshape(bool(ph) and showpp, text = 'H', style = shape.labeldown, color = na, textcolor = color.new(color.red, 0), location = location.abovebar, offset = -prd)
plotshape(bool(pl) and showpp, text = 'L', style = shape.labelup, color = na, textcolor = color.new(color.lime, 0), location = location.belowbar, offset = -prd)

//calculate maximum S/R channel width
prdhighest = ta.highest(511)
prdlowest = ta.lowest(511)
cwidth = (prdhighest - prdlowest) * ChannelW / 100

// get/keep Pivot levels
var pivotvals = array.new_float(0)
var pivotlocs = array.new_float(0)
if bool(ph) or bool(pl)
    array.unshift(pivotvals, bool(ph) ? ph : pl)
    array.unshift(pivotlocs, bar_index)
    for x = array.size(pivotvals) - 1 to 0 by 1
        if bar_index - array.get(pivotlocs, x) > loopback // remove old pivot points
            array.pop(pivotvals)
            array.pop(pivotlocs)
            continue
        break

//find/create SR channel of a pivot point
get_sr_vals(ind) =>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1 by 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= hi ? hi - cpp : cpp - lo
        if wdth <= cwidth // fits the max channel width?
            if cpp <= hi
                lo := math.min(lo, cpp)
                lo
            else
                hi := math.max(hi, cpp)
                hi

            numpp := numpp + 20 // each pivot point added as 20
            numpp
    [hi, lo, numpp]

// keep old SR channels and calculate/sort new channels if we met new pivot point
var suportresistance = array.new_float(20, 0) // min/max levels
changeit(x, y) =>
    tmp = array.get(suportresistance, y * 2)
    array.set(suportresistance, y * 2, array.get(suportresistance, x * 2))
    array.set(suportresistance, x * 2, tmp)
    tmp := array.get(suportresistance, y * 2 + 1)
    array.set(suportresistance, y * 2 + 1, array.get(suportresistance, x * 2 + 1))
    array.set(suportresistance, x * 2 + 1, tmp)

if bool(ph) or bool(pl)
    supres = array.new_float(0) // number of pivot, strength, min/max levels
    stren = array.new_float(10, 0)
    // get levels and strengs
    for x = 0 to array.size(pivotvals) - 1 by 1
        [hi, lo, strength] = get_sr_vals(x)
        array.push(supres, strength)
        array.push(supres, hi)
        array.push(supres, lo)

    // add each HL to strengh
    for x = 0 to array.size(pivotvals) - 1 by 1
        h = array.get(supres, x * 3 + 1)
        l = array.get(supres, x * 3 + 2)
        s = 0
        for y = 0 to loopback by 1
            if high[y] <= h and high[y] >= l or low[y] <= h and low[y] >= l
                s := s + 1
                s
        array.set(supres, x * 3, array.get(supres, x * 3) + s)

    //reset SR levels
    array.fill(suportresistance, 0)
    // get strongest SRs
    src = 0
    for x = 0 to array.size(pivotvals) - 1 by 1
        stv = -1. // value
        stl = -1 // location
        for y = 0 to array.size(pivotvals) - 1 by 1
            if array.get(supres, y * 3) > stv and array.get(supres, y * 3) >= minstrength * 20
                stv := array.get(supres, y * 3)
                stl := y
                stl
        if stl >= 0
            //get sr level
            hh = array.get(supres, stl * 3 + 1)
            ll = array.get(supres, stl * 3 + 2)
            array.set(suportresistance, src * 2, hh)
            array.set(suportresistance, src * 2 + 1, ll)
            array.set(stren, src, array.get(supres, stl * 3))

            // make included pivot points' strength zero 
            for y = 0 to array.size(pivotvals) - 1 by 1
                if array.get(supres, y * 3 + 1) <= hh and array.get(supres, y * 3 + 1) >= ll or array.get(supres, y * 3 + 2) <= hh and array.get(supres, y * 3 + 2) >= ll
                    array.set(supres, y * 3, -1)

            src := src + 1
            if src >= 10
                break

    for x = 0 to 8 by 1
        for y = x + 1 to 9 by 1
            if array.get(stren, y) > array.get(stren, x)
                tmp = array.get(stren, y)
                array.set(stren, y, array.get(stren, x))
                changeit(x, y)


get_level(ind) =>
    float ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind)
            ret
    ret

get_color(ind) =>
    color ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind) > close and array.get(suportresistance, ind + 1) > close ? res_col : array.get(suportresistance, ind) < close and array.get(suportresistance, ind + 1) < close ? sup_col : inch_col
            ret
    ret

var srchannels = array.new_box(10)
for x = 0 to math.min(9, maxnumsr) by 1
    box.delete(array.get(srchannels, x))
    srcol = get_color(x * 2)
    if not na(srcol)
        array.set(srchannels, x, box.new(left = bar_index, top = get_level(x * 2), right = bar_index + 1, bottom = get_level(x * 2 + 1), border_color = srcol, border_width = 1, extend = extend.both, bgcolor = srcol))

resistancebroken = false
supportbroken = false
// check if it's not in a channel
not_in_a_channel = true
for x = 0 to math.min(9, maxnumsr) by 1
    if close <= array.get(suportresistance, x * 2) and close >= array.get(suportresistance, x * 2 + 1)
        not_in_a_channel := false
        not_in_a_channel

// if price is not in a channel then check broken ones
if not_in_a_channel
    for x = 0 to math.min(9, maxnumsr) by 1
        if close[1] <= array.get(suportresistance, x * 2) and close > array.get(suportresistance, x * 2)
            resistancebroken := true
            resistancebroken
        if close[1] >= array.get(suportresistance, x * 2 + 1) and close < array.get(suportresistance, x * 2 + 1)
            supportbroken := true
            supportbroken

alertcondition(resistancebroken, title = 'Resistance Broken', message = 'Resistance Broken')
alertcondition(supportbroken, title = 'Support Broken', message = 'Support Broken')






//sma and addons
// Typical Price = (High + Low + Close)/3  
atr_length = input.int(14, "ATR Length")  // ATR period

// User input
lookback_vwap = input.int(150, "VWAP Lookback Days")

// Typical Price for VWAP
tp = (high + low + close) / 3

// Cumulative sums for rolling VWAP
tpv = ta.cum(tp * volume)
vol_cum = ta.cum(volume)

// Rolling VWAP
vwap_rolling = (tpv - ta.cum(tp * volume)[lookback_vwap]) / (vol_cum - ta.cum(volume)[lookback_vwap])
label_size_input = input.string("Normal", "Label Size", options=["Tiny", "Small", "Normal", "Large", "Huge"])
x_offset_input = input.int(2, "Label X Offset for ATR", minval=0) // Bars to the right
// Convert string input to Pine Script size type
label_size = switch label_size_input
    "Tiny"   => size.tiny
    "Small"  => size.small
    "Normal" => size.normal
    "Large"  => size.large
    "Huge"   => size.huge
// Plot VWAP
plot(vwap_rolling, color=color.white, title="VWAP Rolling")

// --- Simple Moving Averages ---
sma20  = ta.sma(close, 20)
sma50  = ta.sma(close, 50)
sma100 = ta.sma(close, 100)
sma150 = ta.sma(close, 150)
sma200 = ta.sma(close, 200)

// Plot SMAs
plot(sma20,  color=color.rgb(59, 143, 211),   title="SMA20")
plot(sma50,  color=color.rgb(69, 224, 74),  title="SMA50")
plot(sma100, color=color.orange, title="SMA100")
plot(sma150, color=color.purple, title="SMA150")
plot(sma200, color=color.rgb(238, 45, 77),    title="SMA200")

// --- ATR Indicator ---
atrValue = ta.atr(atr_length)
atr=(atrValue / close) * 100

atr_color=color.rgb(36, 224, 42)
if atr>3
    atr_color:=color.rgb(233, 200, 14)
if atr>6
    atr_color:=color.rgb(233, 14, 14)
// Persistent label
var label atr_label = na

if barstate.islast
    // Delete previous label
    if not na(atr_label)
        label.delete(atr_label)
    
    // Offsets to float label to the right
    
    y_offset = 0  // adjust vertically if needed
    
    // Create new label
    atr_label := label.new(x = bar_index + x_offset_input,y = close + y_offset,xloc = xloc.bar_index,yloc = yloc.price,text = "ATR: " + str.tostring(atrValue, format.mintick) + " (" + str.tostring(atr, format.mintick) + "%)",color = atr_color,textcolor = color.white,style = label.style_label_left,size = label_size)
